import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * @author Gabrielle Glynn
 * @since November 8, 2015
 */
 
 public class Calendar {
	 
	 private int futureAuctions;
	 private ArrayList<Auction> allAuctions;
	 private ArrayList<Auction> futureAuctionList;
	 private ArrayList<Auction> pastAuctionList;
	 
	 // needs to check textFile
	 public Calendar(){ 
		 allAuctions = new ArrayList<Auction>();
		 futureAuctionList = new ArrayList<Auction>();
		 pastAuctionList = new ArrayList<Auction>();
		 futureAuctions = 0;
	 }
	   
	 // Make calendar a singleton.	 
	 // http://www.tutorialspoint.com/java/java_using_singleton.htm
	 private static Calendar sCalendar;

	 public static Calendar getCalendar( ) {
		 if (sCalendar == null) sCalendar = new Calendar();
		 return sCalendar;
	 }	 
	 	 
	 private static int MAX_FUTURE_AUCTIONS = 25;
	 private static int MAX_DAYS_OUT = 90;
	 private static int MAX_AUCTIONS_ROLLING_7DAY = 5;
	 private static int MAX_AUCTIONS_SAME_DAY = 2;
	 private static int MAX_HOURS_BTW_AUCTIONS = 2;
	 private static int MAX_NP_AUCTIONS_PER_365_DAYS = 1;
	 
	 // read file into array list of auctions, will use to construct futureAuctionList and pastAuctionList
	 private void readAuctionsFromFile() {
		 
	 }
	 
	 private void readAuctionFromFile(Auction auctionToRead, String fileName) {
		 
	 }
	 
	 
	 private void writeAuctionsToFile() {
		 
	 }
	 
	 private void writeAuctionToFile(Auction auctionToWrite, String fileName) throws IOException {
		 String auctionString = new String();
		 auctionString = auctionToWrite.toString();
		 FileWriter fw = new FileWriter(fileName, true);
		 PrintWriter pw = new PrintWriter(fw);
		 pw.write(auctionString + "\n");
		 pw.close();
	 }
	 
	 
	 // list all auctions: past and future
	 
	 
	 // list future auctions
	 
	 
	 // check if future auction
	 
	 
	 // addAuction
	 private void addAuction(Auction newAuction) {
		 
	 }
	 
	 // editAuction
	 
	 // check if future list is current; if not remove out of date auctions and append them to past auction list
	 
	 
	 // no more than 5 auctions in a rolling 7 day period
	 
	 
	 // no more than 25 auctions may be scheduled into the future
	 private boolean atMaxFutureAuctions() {
		return (futureAuctions == MAX_FUTURE_AUCTIONS);
	}
	 
	 // an auction may not be more than 90 days from the current date
	 private boolean inDateRange(Date currentDate, Date requestedDate) {
		 Date dateAtEndOfRange = new Date();		 
		 java.util.Calendar c = java.util.Calendar.getInstance();
		 c.setTime(dateAtEndOfRange);
		 c.add(java.util.Calendar.DATE, MAX_DAYS_OUT);
		 dateAtEndOfRange = c.getTime();
		
		 return !(requestedDate.before(currentDate) || requestedDate.after(dateAtEndOfRange));
	}
	 
	 // no more than 2 auctions in the same day
	 private boolean atMaxAuctionsPerDay(Date requestedDate) {
		 return true;
	 }
	 
	 // start time of 2nd auction/day must be two hours after end time of he first
	 
	 
	 // no more than one auction per year per nonprofit organization can be scheduled
	 
}